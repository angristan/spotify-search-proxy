// Code generated by mockery v2.38.0. DO NOT EDIT.

package mock_spotify

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockSpotifyClient is an autogenerated mock type for the SpotifyClient type
type MockSpotifyClient struct {
	mock.Mock
}

type MockSpotifyClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSpotifyClient) EXPECT() *MockSpotifyClient_Expecter {
	return &MockSpotifyClient_Expecter{mock: &_m.Mock}
}

// Search provides a mock function with given fields: ctx, query, searchType
func (_m *MockSpotifyClient) Search(ctx context.Context, query string, searchType string) (interface{}, error) {
	ret := _m.Called(ctx, query, searchType)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (interface{}, error)); ok {
		return rf(ctx, query, searchType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) interface{}); ok {
		r0 = rf(ctx, query, searchType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, query, searchType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSpotifyClient_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type MockSpotifyClient_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - searchType string
func (_e *MockSpotifyClient_Expecter) Search(ctx interface{}, query interface{}, searchType interface{}) *MockSpotifyClient_Search_Call {
	return &MockSpotifyClient_Search_Call{Call: _e.mock.On("Search", ctx, query, searchType)}
}

func (_c *MockSpotifyClient_Search_Call) Run(run func(ctx context.Context, query string, searchType string)) *MockSpotifyClient_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSpotifyClient_Search_Call) Return(_a0 interface{}, _a1 error) *MockSpotifyClient_Search_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSpotifyClient_Search_Call) RunAndReturn(run func(context.Context, string, string) (interface{}, error)) *MockSpotifyClient_Search_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSpotifyClient creates a new instance of MockSpotifyClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSpotifyClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSpotifyClient {
	mock := &MockSpotifyClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
